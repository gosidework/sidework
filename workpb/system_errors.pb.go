// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workpb/system_errors.proto

package workpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SystemError_ErrorCode int32

const (
	UNKNOWN SystemError_ErrorCode = 0
)

var SystemError_ErrorCode_name = map[int32]string{
	0: "UNKNOWN",
}

var SystemError_ErrorCode_value = map[string]int32{
	"UNKNOWN": 0,
}

func (SystemError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1f4daeb51dec065b, []int{0, 0}
}

type SystemError struct {
	Code      SystemError_ErrorCode `protobuf:"varint,1,opt,name=code,proto3,enum=workpb.SystemError_ErrorCode" json:"c,omitempty"`
	Message   string                `protobuf:"bytes,2,opt,name=message,proto3" json:"m,omitempty"`
	Backtrace []string              `protobuf:"bytes,3,rep,name=backtrace,proto3" json:"bt,omitempty"`
}

func (m *SystemError) Reset()      { *m = SystemError{} }
func (*SystemError) ProtoMessage() {}
func (*SystemError) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f4daeb51dec065b, []int{0}
}
func (m *SystemError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemError.Merge(m, src)
}
func (m *SystemError) XXX_Size() int {
	return m.Size()
}
func (m *SystemError) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemError.DiscardUnknown(m)
}

var xxx_messageInfo_SystemError proto.InternalMessageInfo

func (m *SystemError) GetCode() SystemError_ErrorCode {
	if m != nil {
		return m.Code
	}
	return UNKNOWN
}

func (m *SystemError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SystemError) GetBacktrace() []string {
	if m != nil {
		return m.Backtrace
	}
	return nil
}

func init() {
	proto.RegisterEnum("workpb.SystemError_ErrorCode", SystemError_ErrorCode_name, SystemError_ErrorCode_value)
	proto.RegisterType((*SystemError)(nil), "workpb.SystemError")
}

func init() { proto.RegisterFile("workpb/system_errors.proto", fileDescriptor_1f4daeb51dec065b) }

var fileDescriptor_1f4daeb51dec065b = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0xcf, 0x2f, 0xca,
	0x2e, 0x48, 0xd2, 0x2f, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0x8d, 0x4f, 0x2d, 0x2a, 0xca, 0x2f, 0x2a,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xc8, 0x49, 0x89, 0xa4, 0xe7, 0xa7, 0xe7,
	0x83, 0x85, 0xf4, 0x41, 0x2c, 0x88, 0xac, 0xd2, 0x31, 0x46, 0x2e, 0xee, 0x60, 0xb0, 0x2e, 0x57,
	0x90, 0x26, 0x21, 0x27, 0x2e, 0x96, 0xe4, 0xfc, 0x94, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e,
	0x23, 0x59, 0x3d, 0x88, 0x66, 0x3d, 0x24, 0x25, 0x7a, 0x60, 0xd2, 0x39, 0x3f, 0x25, 0xd5, 0x89,
	0xff, 0xd5, 0x3d, 0x79, 0xee, 0x64, 0x9d, 0xfc, 0xdc, 0xcc, 0x92, 0xd4, 0xdc, 0x82, 0x92, 0xca,
	0x20, 0xb0, 0x5e, 0x21, 0x4d, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x09, 0x26,
	0x05, 0x46, 0x0d, 0x4e, 0x88, 0xba, 0x5c, 0x24, 0x75, 0x30, 0x79, 0x21, 0x3d, 0x2e, 0xce, 0xa4,
	0xc4, 0xe4, 0xec, 0x92, 0xa2, 0xc4, 0xe4, 0x54, 0x09, 0x66, 0x05, 0x66, 0x0d, 0x4e, 0x27, 0x81,
	0x57, 0xf7, 0xe4, 0x79, 0x92, 0x4a, 0x90, 0x54, 0x23, 0x94, 0x28, 0x49, 0x70, 0x71, 0xc2, 0xad,
	0x17, 0xe2, 0xe6, 0x62, 0x0f, 0xf5, 0xf3, 0xf6, 0xf3, 0x0f, 0xf7, 0x13, 0x60, 0x70, 0xb2, 0xb8,
	0xf0, 0x50, 0x8e, 0xe1, 0xc6, 0x43, 0x39, 0x86, 0x0f, 0x0f, 0xe5, 0x18, 0x1b, 0x1e, 0xc9, 0x31,
	0xae, 0x78, 0x24, 0xc7, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0xbe, 0x78, 0x24, 0xc7, 0xf0, 0xe1, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x33, 0x1e,
	0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0x24, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x47, 0x03, 0xfd, 0x39, 0x45, 0x01, 0x00, 0x00,
}

func (x SystemError_ErrorCode) String() string {
	s, ok := SystemError_ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *SystemError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SystemError)
	if !ok {
		that2, ok := that.(SystemError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if len(this.Backtrace) != len(that1.Backtrace) {
		return false
	}
	for i := range this.Backtrace {
		if this.Backtrace[i] != that1.Backtrace[i] {
			return false
		}
	}
	return true
}
func (this *SystemError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&workpb.SystemError{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Backtrace: "+fmt.Sprintf("%#v", this.Backtrace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSystemErrors(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *SystemError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Backtrace) > 0 {
		for iNdEx := len(m.Backtrace) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Backtrace[iNdEx])
			copy(dAtA[i:], m.Backtrace[iNdEx])
			i = encodeVarintSystemErrors(dAtA, i, uint64(len(m.Backtrace[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSystemErrors(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintSystemErrors(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSystemErrors(dAtA []byte, offset int, v uint64) int {
	offset -= sovSystemErrors(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SystemError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSystemErrors(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSystemErrors(uint64(l))
	}
	if len(m.Backtrace) > 0 {
		for _, s := range m.Backtrace {
			l = len(s)
			n += 1 + l + sovSystemErrors(uint64(l))
		}
	}
	return n
}

func sovSystemErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSystemErrors(x uint64) (n int) {
	return sovSystemErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *SystemError) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SystemError{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Backtrace:` + fmt.Sprintf("%v", this.Backtrace) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSystemErrors(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *SystemError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSystemErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= SystemError_ErrorCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backtrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSystemErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSystemErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSystemErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backtrace = append(m.Backtrace, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSystemErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSystemErrors
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSystemErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSystemErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSystemErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSystemErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSystemErrors
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSystemErrors
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSystemErrors
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSystemErrors        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSystemErrors          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSystemErrors = fmt.Errorf("proto: unexpected end of group")
)
