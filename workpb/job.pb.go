// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: workpb/job.proto

package workpb

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Job struct {
	// Universally Unique Lexicographically Sortable Identifier (ULID)
	// https://github.com/oklog/ulid
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace  string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"ns,omitempty"`
	Queue      string `protobuf:"bytes,3,opt,name=queue,proto3" json:"q,omitempty"`
	Type       string `protobuf:"bytes,4,opt,name=type,proto3" json:"t,omitempty"`
	Body       []byte `protobuf:"bytes,6,opt,name=body,proto3" json:"bd,omitempty"`
	CreatedAt  int64  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"cat,omitempty"`
	EnqueuedAt int64  `protobuf:"varint,8,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"eat,omitempty"`
	At         int64  `protobuf:"varint,9,opt,name=at,proto3" json:"at,omitempty"`
	// TTL in seconds
	Ttl     uint32   `protobuf:"varint,10,opt,name=ttl,proto3" json:"to,omitempty"`
	Retry   uint32   `protobuf:"varint,11,opt,name=retry,proto3" json:"rt,omitempty"`
	Failure *Failure `protobuf:"bytes,12,opt,name=failure,proto3" json:"f,omitempty"`
}

func (m *Job) Reset()      { *m = Job{} }
func (*Job) ProtoMessage() {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c2eecaf805b5f, []int{0}
}
func (m *Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return m.Size()
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Job) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Job) GetQueue() string {
	if m != nil {
		return m.Queue
	}
	return ""
}

func (m *Job) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Job) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Job) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Job) GetEnqueuedAt() int64 {
	if m != nil {
		return m.EnqueuedAt
	}
	return 0
}

func (m *Job) GetAt() int64 {
	if m != nil {
		return m.At
	}
	return 0
}

func (m *Job) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *Job) GetRetry() uint32 {
	if m != nil {
		return m.Retry
	}
	return 0
}

func (m *Job) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

type Failure struct {
	RetryCount int32    `protobuf:"varint,1,opt,name=retry_count,json=retryCount,proto3" json:"rc,omitempty"`
	FailedAt   int64    `protobuf:"varint,2,opt,name=failed_at,json=failedAt,proto3" json:"fat,omitempty"`
	NextAt     int64    `protobuf:"varint,3,opt,name=next_at,json=nextAt,proto3" json:"nat,omitempty"`
	Error      *Error   `protobuf:"bytes,4,opt,name=error,proto3" json:"e,omitempty"`
	Backtrace  []string `protobuf:"bytes,5,rep,name=backtrace,proto3" json:"bt,omitempty"`
}

func (m *Failure) Reset()      { *m = Failure{} }
func (*Failure) ProtoMessage() {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c2eecaf805b5f, []int{1}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(m, src)
}
func (m *Failure) XXX_Size() int {
	return m.Size()
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetRetryCount() int32 {
	if m != nil {
		return m.RetryCount
	}
	return 0
}

func (m *Failure) GetFailedAt() int64 {
	if m != nil {
		return m.FailedAt
	}
	return 0
}

func (m *Failure) GetNextAt() int64 {
	if m != nil {
		return m.NextAt
	}
	return 0
}

func (m *Failure) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Failure) GetBacktrace() []string {
	if m != nil {
		return m.Backtrace
	}
	return nil
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"m,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"t,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4c2eecaf805b5f, []int{2}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*Job)(nil), "workpb.Job")
	proto.RegisterType((*Failure)(nil), "workpb.Failure")
	proto.RegisterType((*Error)(nil), "workpb.Error")
}

func init() { proto.RegisterFile("workpb/job.proto", fileDescriptor_fc4c2eecaf805b5f) }

var fileDescriptor_fc4c2eecaf805b5f = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0xf6, 0x39, 0xb9, 0x8c, 0x13, 0xdd, 0xb1, 0xa2, 0xb0, 0x28, 0x36, 0x56, 0xf8,
	0xa3, 0x80, 0x50, 0x0e, 0x02, 0x05, 0xa2, 0x4b, 0x10, 0x14, 0x94, 0x34, 0x94, 0xa7, 0xb5, 0xb3,
	0x89, 0xc2, 0x5d, 0xbc, 0xb9, 0xcd, 0x44, 0x90, 0x8e, 0x47, 0xa0, 0xe4, 0x11, 0x78, 0x14, 0xca,
	0x94, 0x47, 0x13, 0x11, 0xa7, 0x41, 0xa9, 0xee, 0x09, 0x10, 0xda, 0xdd, 0xe4, 0xbc, 0x69, 0xe8,
	0xac, 0xf9, 0x7e, 0x33, 0x3b, 0xf3, 0xcd, 0x18, 0x4e, 0x3f, 0x4b, 0x75, 0x31, 0x4d, 0xcf, 0x3e,
	0xc9, 0xb4, 0x33, 0x55, 0x12, 0x25, 0xad, 0xd8, 0xc8, 0xbd, 0xbb, 0x23, 0x39, 0x92, 0x26, 0x74,
	0xa6, 0xbf, 0xac, 0xda, 0xfa, 0x15, 0x40, 0xf0, 0x5e, 0xa6, 0x34, 0x01, 0x7f, 0x3c, 0x88, 0x49,
	0x42, 0xda, 0xb5, 0xfe, 0xe9, 0x76, 0xd5, 0xac, 0x8f, 0x07, 0x4f, 0xe5, 0x64, 0x8c, 0x62, 0x32,
	0xc5, 0xc5, 0x07, 0x7f, 0x3c, 0xa0, 0x1d, 0xa8, 0xe5, 0x7c, 0x22, 0x66, 0x53, 0x9e, 0x89, 0xd8,
	0x2f, 0xc1, 0x7c, 0xe6, 0x80, 0x25, 0x42, 0x1f, 0x42, 0x78, 0x35, 0x17, 0x73, 0x11, 0x07, 0x86,
	0x3d, 0xd9, 0xae, 0x9a, 0xd1, 0x95, 0x83, 0x5a, 0x95, 0xde, 0x87, 0x23, 0x5c, 0x4c, 0x45, 0x7c,
	0x54, 0x52, 0xe8, 0x50, 0x46, 0xa4, 0x0f, 0xe0, 0x28, 0x95, 0x83, 0x45, 0x5c, 0x49, 0x48, 0xbb,
	0x6e, 0x9f, 0x4d, 0xdd, 0xfe, 0x8c, 0x4a, 0x9f, 0x01, 0x64, 0x4a, 0x70, 0x14, 0x83, 0x73, 0x8e,
	0x71, 0x35, 0x21, 0xed, 0xa0, 0x7f, 0x67, 0xbb, 0x6a, 0x36, 0x32, 0xee, 0x96, 0xac, 0xed, 0xa0,
	0x1e, 0xd2, 0x2e, 0x44, 0x22, 0x37, 0x7d, 0x98, 0x94, 0xe3, 0x32, 0x45, 0x1c, 0xa4, 0xc0, 0x9e,
	0xea, 0xa1, 0x76, 0x8a, 0x63, 0x5c, 0x33, 0xa8, 0xe9, 0xe4, 0x80, 0xf4, 0x39, 0xd2, 0x16, 0x04,
	0x88, 0x97, 0x31, 0x24, 0xa4, 0xdd, 0xb0, 0x08, 0x4a, 0x07, 0xd1, 0x22, 0x7d, 0x04, 0xa1, 0x12,
	0xa8, 0x16, 0x71, 0x54, 0x52, 0xca, 0x2d, 0x64, 0x65, 0xfa, 0x1a, 0xaa, 0x43, 0x3e, 0xbe, 0x9c,
	0x2b, 0x11, 0xd7, 0x13, 0xd2, 0x8e, 0xba, 0x27, 0x1d, 0xbb, 0xcf, 0xce, 0x3b, 0x1b, 0xb6, 0x96,
	0x0d, 0x9d, 0xcc, 0x7d, 0x42, 0xeb, 0x2f, 0x81, 0xea, 0x8e, 0xa2, 0xcf, 0x21, 0x32, 0x05, 0xcf,
	0x33, 0x39, 0xcf, 0xd1, 0x2c, 0x3a, 0xdc, 0xbd, 0x9a, 0xb9, 0x83, 0x1a, 0xe8, 0x8d, 0x66, 0xf4,
	0xc2, 0x75, 0x25, 0x6b, 0x8d, 0x5f, 0x5a, 0x33, 0x3c, 0x18, 0xf8, 0xd8, 0x32, 0x3d, 0xa4, 0x4f,
	0xa0, 0x9a, 0x8b, 0x2f, 0xa8, 0xe9, 0xa0, 0xa4, 0xf3, 0x03, 0xba, 0xa2, 0x89, 0x1e, 0xd2, 0x97,
	0x10, 0x0a, 0xa5, 0xa4, 0x32, 0x6b, 0x8f, 0xba, 0x8d, 0xfd, 0x50, 0x6f, 0x75, 0xd0, 0x8e, 0x24,
	0x5c, 0x33, 0x0c, 0xac, 0x3b, 0x4a, 0x79, 0x76, 0x81, 0x4a, 0x9f, 0x60, 0x98, 0x04, 0xfb, 0x13,
	0x4c, 0x0f, 0xd6, 0x7b, 0x8b, 0xb4, 0x3e, 0x42, 0x68, 0x0a, 0xd2, 0xc7, 0x50, 0x9d, 0x88, 0xd9,
	0x8c, 0x8f, 0xc4, 0xee, 0xc4, 0xcd, 0x0b, 0x13, 0xd7, 0xb4, 0x9d, 0x7e, 0x7b, 0x8f, 0xfe, 0x7f,
	0xee, 0xb1, 0xff, 0x6a, 0xb9, 0x66, 0xde, 0xf5, 0x9a, 0x79, 0x37, 0x6b, 0x46, 0xbe, 0x16, 0x8c,
	0xfc, 0x28, 0x18, 0xf9, 0x59, 0x30, 0xb2, 0x2c, 0x18, 0xf9, 0x5d, 0x30, 0xf2, 0xa7, 0x60, 0xde,
	0x4d, 0xc1, 0xc8, 0xb7, 0x0d, 0xf3, 0xbe, 0x6f, 0x98, 0xb7, 0xdc, 0x30, 0xef, 0x7a, 0xc3, 0xbc,
	0xb4, 0x62, 0x7e, 0xbb, 0x17, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x12, 0x2f, 0x9c, 0xa8,
	0x03, 0x00, 0x00,
}

func (this *Job) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Job)
	if !ok {
		that2, ok := that.(Job)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.Queue != that1.Queue {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Body, that1.Body) {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.EnqueuedAt != that1.EnqueuedAt {
		return false
	}
	if this.At != that1.At {
		return false
	}
	if this.Ttl != that1.Ttl {
		return false
	}
	if this.Retry != that1.Retry {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RetryCount != that1.RetryCount {
		return false
	}
	if this.FailedAt != that1.FailedAt {
		return false
	}
	if this.NextAt != that1.NextAt {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if len(this.Backtrace) != len(that1.Backtrace) {
		return false
	}
	for i := range this.Backtrace {
		if this.Backtrace[i] != that1.Backtrace[i] {
			return false
		}
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *Job) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&workpb.Job{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "Queue: "+fmt.Sprintf("%#v", this.Queue)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "EnqueuedAt: "+fmt.Sprintf("%#v", this.EnqueuedAt)+",\n")
	s = append(s, "At: "+fmt.Sprintf("%#v", this.At)+",\n")
	s = append(s, "Ttl: "+fmt.Sprintf("%#v", this.Ttl)+",\n")
	s = append(s, "Retry: "+fmt.Sprintf("%#v", this.Retry)+",\n")
	if this.Failure != nil {
		s = append(s, "Failure: "+fmt.Sprintf("%#v", this.Failure)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Failure) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&workpb.Failure{")
	s = append(s, "RetryCount: "+fmt.Sprintf("%#v", this.RetryCount)+",\n")
	s = append(s, "FailedAt: "+fmt.Sprintf("%#v", this.FailedAt)+",\n")
	s = append(s, "NextAt: "+fmt.Sprintf("%#v", this.NextAt)+",\n")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	s = append(s, "Backtrace: "+fmt.Sprintf("%#v", this.Backtrace)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&workpb.Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringJob(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Failure != nil {
		{
			size, err := m.Failure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Retry != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.Retry))
		i--
		dAtA[i] = 0x58
	}
	if m.Ttl != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x50
	}
	if m.At != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.At))
		i--
		dAtA[i] = 0x48
	}
	if m.EnqueuedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.EnqueuedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Queue) > 0 {
		i -= len(m.Queue)
		copy(dAtA[i:], m.Queue)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Queue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Failure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Backtrace) > 0 {
		for iNdEx := len(m.Backtrace) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Backtrace[iNdEx])
			copy(dAtA[i:], m.Backtrace[iNdEx])
			i = encodeVarintJob(dAtA, i, uint64(len(m.Backtrace[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintJob(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.NextAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.NextAt))
		i--
		dAtA[i] = 0x18
	}
	if m.FailedAt != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.FailedAt))
		i--
		dAtA[i] = 0x10
	}
	if m.RetryCount != 0 {
		i = encodeVarintJob(dAtA, i, uint64(m.RetryCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintJob(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintJob(dAtA []byte, offset int, v uint64) int {
	offset -= sovJob(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Queue)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovJob(uint64(m.CreatedAt))
	}
	if m.EnqueuedAt != 0 {
		n += 1 + sovJob(uint64(m.EnqueuedAt))
	}
	if m.At != 0 {
		n += 1 + sovJob(uint64(m.At))
	}
	if m.Ttl != 0 {
		n += 1 + sovJob(uint64(m.Ttl))
	}
	if m.Retry != 0 {
		n += 1 + sovJob(uint64(m.Retry))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func (m *Failure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RetryCount != 0 {
		n += 1 + sovJob(uint64(m.RetryCount))
	}
	if m.FailedAt != 0 {
		n += 1 + sovJob(uint64(m.FailedAt))
	}
	if m.NextAt != 0 {
		n += 1 + sovJob(uint64(m.NextAt))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovJob(uint64(l))
	}
	if len(m.Backtrace) > 0 {
		for _, s := range m.Backtrace {
			l = len(s)
			n += 1 + l + sovJob(uint64(l))
		}
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovJob(uint64(l))
	}
	return n
}

func sovJob(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJob(x uint64) (n int) {
	return sovJob(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Job) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Job{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`Queue:` + fmt.Sprintf("%v", this.Queue) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`EnqueuedAt:` + fmt.Sprintf("%v", this.EnqueuedAt) + `,`,
		`At:` + fmt.Sprintf("%v", this.At) + `,`,
		`Ttl:` + fmt.Sprintf("%v", this.Ttl) + `,`,
		`Retry:` + fmt.Sprintf("%v", this.Retry) + `,`,
		`Failure:` + strings.Replace(this.Failure.String(), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`RetryCount:` + fmt.Sprintf("%v", this.RetryCount) + `,`,
		`FailedAt:` + fmt.Sprintf("%v", this.FailedAt) + `,`,
		`NextAt:` + fmt.Sprintf("%v", this.NextAt) + `,`,
		`Error:` + strings.Replace(this.Error.String(), "Error", "Error", 1) + `,`,
		`Backtrace:` + fmt.Sprintf("%v", this.Backtrace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringJob(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnqueuedAt", wireType)
			}
			m.EnqueuedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnqueuedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field At", wireType)
			}
			m.At = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.At |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retry", wireType)
			}
			m.Retry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retry |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
			}
			m.RetryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedAt", wireType)
			}
			m.FailedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAt", wireType)
			}
			m.NextAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backtrace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backtrace = append(m.Backtrace, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJob
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJob
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJob
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJob
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJob(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJob
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJob(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJob
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJob
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJob
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJob
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJob
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJob        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJob          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJob = fmt.Errorf("proto: unexpected end of group")
)
